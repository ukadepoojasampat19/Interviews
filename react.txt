As a fresher, interviewers will typically ask questions that focus on the fundamentals of React, your understanding of basic concepts, and your ability to apply them in simple scenarios. Here's a tailored list of questions that are more suitable for a fresher, keeping in mind your level of experience:
***********************************************************************************************************
### **1. Basics of React**
- What is React, and why do we use it?
->react is popular javascript libraray
features :
1)component based archtecture(reusable components)
2)Virtual DOM :copy of the original dom which has same tree structor as the original dom is called virtual dom that react updated directly . when ever first time the application is completed react virtual dom get created and if there is change in the state, props and context at that time the virtual dom reconstruct and compate with the real dom and the real dom get updated.
3)single page application
4)flexibility

-difference between states and props 
*********************************************************************************************************************
STATES :
***************************************************************************************************************
state is object where we store the property of the components
states always present in the components.
eg:

//beloww is my car components
import { useState} from "react";
const car = ({deafultName, color}) =>  // direct write in function componnets  
{
    //destructoring of the props
    //another way to destructoring of the prop is to diretcly write in the function componenst like above
    const {deafultName, color}  =  props
    const [carName,setCarName] = useState(defaultName);
    return
    {
        <input type ="text" placeholder" enter the car name" onchange=(e) =>{e.target.value }/>
        <p> I am in car {carname}</p>
        <p> color of the car {color} </p>
    }
}
***********************************************************************
props
***********************************************************************\
 props means which are passed to the componenst externally which makes 

import Car from "./location"
const App =() =>
{
    return{
        <Car name="marauti" color="red" defaultName ="xyz"/>
    }
}

diffreneces :
1) state inside the componenst and props are outside the components
2) states can be modified inside the componenets but props cannot modified insude the componets 
***************************************************************************************************************

//follwing execution of the code with using async await.
const dt = async () =>
{
    console.log("fetching"); first execute 
    const res = await fetch("http://example.com");
    console.log(res);  // third ex ecute
}
dt();
console.log("data fectched succesfully"); //second execute
***execution**
1)fetching 2)data fetched succesfully 3)data(print hoil)

//without using async await
const dt = () => 
{
    console.log("fetching");
    const res = fetch("http://example.com");
    console.log(res);

}
dt();
console.log("fetched succesfully");
***execution***
1)fetching 2)promise (pending) 3)fetched succesfully


*******************************************************************************************************
VIRTUAL DOM:

State/Props Change:

Every time you make a change to the state or props, React re-renders the components. But instead of directly applying these changes to the real DOM (which would be slow), React creates a new Virtual DOM object (or tree) to represent what the updated UI should look like.
Virtual DOM Comparison (Diffing):

React then compares this new Virtual DOM tree (the updated object) with the previous Virtual DOM (the old object). This process is called reconciliation.
During this comparison, React identifies the differences between the new Virtual DOM and the previous one. For example, if a button’s text changed, only that part of the Virtual DOM is marked as “different.”
Updating the Real DOM:

Once React has identified the changes (called the diff), it applies only those changes to the real DOM. This means React doesn’t re-render the entire DOM—only the parts that have actually changed, which is what makes it efficient

Garbage Collection: Once the diffing is done, and updates have been applied to the real DOM, the old Virtual DOM is discarded, meaning memory usage is further optimized. JavaScript's garbage collector handles cleaning up unused memory

*******************************************************************************************************


- What is the Virtual DOM, and how does React use it to improve performance?
-> virtual dom is the copy of the origial dom wehere it avoid the direct changes in the real dom as it affect the performance 
Interviewer: "So storing it in memory helps React make quick calculations before interacting with the real DOM?"

Me: "Exactly! Working in memory means React can quickly calculate changes, and only after that does it apply the minimal updates to the real DOM, which improves performance

improvememnt:
-minimized direct dom manipulation

- What is JSX? Can you explain its role in React?
->JSX stands for JavaScript XML. It’s a syntax extension for JavaScript that allows you to write HTML-like code within JavaScript files, which makes writing React components easier and more intuitive.
 
  Role of JSX in React:

HTML-like Syntax in JavaScript:

JSX allows us to write HTML-like tags directly in our JavaScript code, which makes the structure of React components much clearer and more readable.
For example, instead of calling React.createElement to define elements, we can write something like:

const element = <h1>Hello, world!</h1>;

2)Not Mandatory, but Convenient:
You don’t have to use JSX in React—React will still work without it. However, JSX makes it much easier to create UI components in a declarative way.
const element = React.createElement('h1', null, 'Hello, world!');

---JSX Gets Compiled:

JSX is not valid JavaScript by itself. React uses a tool like Babel to compile JSX into regular JavaScript. Under the hood, JSX is converted into calls to React.createElement().
For example, <h1>Hello</h1> becomes:

--Component Structure:
  ****JSX is not valid JavaScript by itself. React uses a tool like Babel to compile JSX into regular JavaScript. Under the hood, JSX is converted into calls to React.createElement().

  function MyComponent() {
  return <h1>Hello from MyComponent!</h1>;
}

-------------------------------------------------------------------------------------------------------------
- How do you create a component in React? Can you explain the difference between a functional component and a class component?
->
In React, components are the building blocks of your UI. You can create them as either functional components or class components.

Functional Component:
A functional component is a JavaScript function that returns JSX (HTML-like syntax).

jsx
Copy code
function Greeting(props) {
  return <h1>Hello, {props.name}!</h1>;
}
Simple and concise.
Can handle state and side effects using hooks like useState and useEffect.
Class Component:
A class component is a JavaScript ES6 class that extends React.Component and has a render method to return JSX.

jsx
Copy code
class Greeting extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}!</h1>;
  }
}
More verbose, uses this to access props and state.
Was the only way to manage state and lifecycle methods before hooks.
Key Differences:
Functional Components: Simpler, use hooks for state and lifecycle. The modern, preferred approach.
Class Components: More complex, use this and have lifecycle methods. Used more before hooks were introduced.
Conclusion: Functional components with hooks have largely replaced class components due to their simplicity and flexibility.

----------------------------------------------------------------------------------------------------------------
-why we use  function components rather than class components?
->before React introduced hooks in version 16.8 (early 2019), functional components were mostly used for stateless components. They were simple, but couldn’t handle state or lifecycle methods, so they were limited in functionality.

For any component that needed to manage state or respond to lifecycle events (like mounting, updating, or unmounting), developers had to use class components.

Before Hooks:
Functional Components: Could only be used for presentational components (stateless).
Class Components: Were required whenever you needed to manage state, handle side effects, or use lifecycle methods (like componentDidMount, componentDidUpdate, etc.).
After Hooks:
With the introduction of hooks, functional components gained the ability to:

Manage state (useState)
Perform side effects (useEffect)
Use other hooks for tasks like context, memoization, and refs.
This allowed functional components to replace class components in almost every situation, making them the preferred approach for both stateful and stateless components

----------------------------------------------------------------------------------------------------------------------------------------
- What are props in React? How do you pass data between components using props?
-> which are passed externally to the components which cannot change in the componenets
  Props are read-only, meaning the child component should not modify them.
  Props help in making components reusable by passing different data for different use cases.
  Data flow in React via props is unidirectional, always from parent to child.
---------------------------------------------------------------------------------------------------------------
- What is state in React, and how is it different from props?
->state is object where we store the property of the components and props which are passed to the componenets externally
-------------------------------------------------------------------------------------------------------------
-How do you update the state of a React component?
->In functional componenets we have useState hook which has state varial and state function to update the state.
- Explain the concept of unidirectional data flow in React.
---------------------------------------------------------------------------------------------------------------
### **2. React Hooks**
- What are React Hooks? Why were they introduced?
->Hooks eliminate the need for class components by bringing state and lifecycle features to functional components. This simplifies the component structure and reduces the need to understand this or lifecycle methods.
---------------------------------------------------------------------------------------------------------------
-explain react componenet lifecycle?
->basisacily involves different stages.
1)intialization : intializa the componenets.
2)mounting : if any componenet is visible on screen is called mounting.
3)updation: whenever there is change in state.
4)unmounting : whenevr the component became invisisble from the screen means it is unmount.

**************************************************************************************************************
USEEFFECT :

To connect your component to some external system, call useEffect at the top level of your component:
Some components need to stay connected to the network, some browser API, or a third-party library, while they are displayed on the page. These systems aren’t controlled by React, so they are called external

it const consist two thing first setup code which actually runs which has cleanup function (return() function which will run when the componenst is re-render means when ever you try to chnage the state)
second one is the dependency: means [] : empty means it will run when the componnet is mounted, [counter] : is some value is added it means whenevr the value get chnage the first the clenaup code will run then the change code will run. you can passed as much as values in dependcies array ,if any of the value chnages it will re-render and mounted again

IMP POINTS:
React calls your setup and cleanup functions whenever it’s necessary, which may happen multiple times:

Your setup code runs when your component is added to the page (mounts).
-After every re-render of your component where the dependencies have changed:
-First, your cleanup code runs with the old props and state.
-Then, your setup code runs with the new props and state.
-Your cleanup code runs one final time after your component is removed from the page (unmounts).
***************************************************************************************************************
usage :
useEffect(setup, dependencies?)
Reference
useEffect(setup, dependencies?)
Usage
Connecting to an external system
Wrapping Effects in custom Hooks
Controlling a non-React widget
Fetching data with Effects
Specifying reactive dependencies
Updating state based on previous state from an Effect
Removing unnecessary object dependencies
Removing unnecessary function dependencies
Reading the latest props and state from an Effect
Displaying different content on the server and the client
Troubleshooting
My Effect runs twice when the component mounts
My Effect runs after every re-render
My Effect keeps re-running in an infinite cycle
My cleanup logic runs even though my component didn’t unmount
My Effect does something visual, and I see a flicker before it runs

if we have to perform any task inbetween componnets based lifecycle we used useEffect hook
---------------------------------------------------------------------------------------------------------------
USECONTEXT:

-problem with prop drilling.

defination : A way to pass data through the componenets tree without having to pass props down manually at every level.


createContext : create a contet object.
provider : a components that provides the context value to its children .
useContetx(consumer) : A hook that allow you to consume a context.
**********************************************************
first file . App
import Home from './xyz'
import { BioProvider} from "./"
export const Home = () =>
{
    return (
      <BioProvider>
      <Home/>
      </BioProvider>
    )
    
}
**********************************************************
second file. Home
import {useContext} from "react";
import {BioContext} from "./";

export const Home =() =>
{
    const {myName, Age} = useContext(BioContext);
    return (
        <h1> hey how are you {myname} age is {Age} </h1> 
    )
}
**********************************************************
//third file (index.js)(context is define)
import {useContext} from "react";

export const BioContext = createContext();  // BioContext will act as whole components;

//2nd setup
export const BioProvider = ({children}) => // {} means destructoring the value
{
    const myname  ="pooja";
    const age ="21";
   return <BioProvider.Provider value = {{myname,age}}> // data is more than 1 then passed it in curlu braces 1 curly brace asa normal javascript and second for passing the object 
   
     {children}
    </BioProvider.Provider>;
}
*************************************************************
----------------------------------------------------------------------------------------------------------------


- What is the `useEffect` hook, and when do you use it? Can you give an example?
- What is the purpose of the `useRef` hook? Can you provide a basic use case?

### **3. Component Lifecycle**
- What are the lifecycle methods in React class components? Can you briefly explain each one?
->React class components have several lifecycle methods that allow you to hook into different stages of a component's life. These methods are divided into three phases:
 Mounting : This phase covers when a component is being inserted into the DOM for the first time
Updating : This phase is triggered when a component’s state or props change, causing a re-render.
Unmounting :This phase occurs when the component is being removed from the DOM.


- How do functional components handle side effects compared to class components (in terms of lifecycle methods)?
->In React, functional components handle side effects using the useEffect Hook, while class components manage side effects through lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount


- What happens during the mounting, updating, and unmounting phases of a component’s lifecycle?
-> first phase is initilaiziling : means just create the components.
2)mounting : if any componenets is visisble on screen is called mounting.
3)updating : changing states , props etc.
4)unmounting : when the componeents is invisisble it is called unmounting.

### **4. Handling Events**
- How do you handle events in React? Can you give an example of handling a button click?
->In React, handling events is similar to handling events in regular HTML, but with some differences:

Event names are written in camelCase (e.g., onClick instead of onclick).
Event handlers are passed as functions, not as strings (e.g., {handleClick} instead of "handleClick()").
eg : <button onClick={handleClick}>Click me</button>
we can useState hook to update the value which has two parameter first one hich hold current value and second which sets value.

- How is event handling in React different from standard HTML event handling?
->
Aspect	                                  React	                                                   HTML
Event Naming	                    CamelCase (onClick)	                                 Lowercase (onclick)
Event Handler Syntax	            Pass function reference ({handleClick})	             Use string ("handleClick()")
Event Object	                    SyntheticEvent  (cross-browser)	                     Native DOM Event (browser-specific)
Event Delegation	                Handled by React automatically	                     Attached to each DOM element
Binding this (class)	            Manual binding required	                             Automatically bound to element
Preventing Default	              event.preventDefault() (synthetic)	                 event.preventDefault()
Event Propagation	                event.stopPropagation() (synthetic)	                 event.stopPropagation()


- why we use react intead of html?
->HTML is still an essential part of web development, but developers prefer using React (and similar JavaScript frameworks) for several key reasons. While plain HTML is great for static websites, React provides many features that make building dynamic, interactive, and scalable web applications easier.
****Key Points:
**No Database: This page doesn't connect to a database. All the text is "hardcoded."
**No User Interaction: If someone wanted to add a comment or submit information, they couldn't do it on this static site.
**Simple and Fast: Since there’s no processing or data fetching, this website loads very fast.

### **5. Forms in React**
- How do you handle form inputs in React?
- What is the difference between controlled and uncontrolled components in form handling?
- How do you handle form validation in React?

### **6. Lists and Keys**
- How do you render a list of items in React?
- What is the significance of the `key` prop when rendering lists in React?

### **7. React Router (Basic Navigation)**
- What is React Router, and why do we use it?
- How do you implement basic routing in React?

### **8. Conditional Rendering**
- How do you conditionally render elements in React? Can you provide an example?

### **9. Error Handling**
- How do you handle errors in React?
- What are error boundaries in React? Are they available in functional components?

### **10. Performance Optimization (Basic)**
- What is `React.memo`, and when would you use it?
- How do you optimize performance in a React application?

### **11. State Management (Basic)**
- How do you manage state in React without using external libraries?
- What is Context API in React, and how does it help manage state?

### **12. Styling in React**
- How do you apply styles to a React component?
- What are the different ways to style React components (CSS, inline styles, CSS-in-JS, styled-components)?

### **13. Testing Basics (Optional for Freshers)**
- Have you ever written tests for a React component? What testing libraries can you use for testing React?

### **14. React with Backend (Optional for Freshers)**
- How do you fetch data from a backend API in React?
- Can you briefly explain how you would handle loading and error states when fetching data?

---

### **Project-based or Practical Questions**
- Have you worked on any React projects? Can you explain one of them?
- How did you manage state and props in your project?
- Did you face any challenges while building the project? How did you overcome them?
- Can you explain how you handled routing in your project (if applicable)?
  
---

These questions are aimed at testing your understanding of React's basic principles and your ability to apply them. As a fresher, focus on explaining your thought process and showing that you understand the core concepts, even if you haven’t worked on advanced topics yet.